- cache start: params['start'], hours: @hours do
  /! ChartCache #{Time.now} p:#{{params.inspect}} h:#{@hours} s:#{@snapshots.size}
  ruby:
    chart_data = {}
    @snapshots.each do |snapshot|
      snapshot.exchange_runs.each do |ex_run|
        depth_runs = ex_run.depth_runs.includes(:market).
                     where("(markets.from_currency = ? and markets.to_currency = ?) or"+
                           "(markets.from_currency = ? and markets.to_currency = ?)",
                           @ac, @pc, @pc, @ac)
        if depth_runs.size == 2
          chart_data[ex_run.exchange] ||= [ ex_run.exchange.display_name, [], [] ]

          o=depth_runs.where('markets.from_currency = ?', @ac).first
          op = o.best_offer ? o.best_offer.price : nil
          chart_data[ex_run.exchange][1] << [o.created_at.to_i*1000, op]
          o=depth_runs.where('markets.from_currency = ?', @pc).first
          op = o.best_offer ? o.best_offer.price : nil
          chart_data[ex_run.exchange][2] << [o.created_at.to_i*1000, op]
        end
      end
    end
    @chart_data = chart_data.map{|k,v| v}.sort_by{|d| d[0]}

    strategies = @snapshots.map{|s| s.strategies.for(@ac, @pc).first}
    @strategy_data = strategies.map do |strategy|
      if strategy
        trade_stage = strategy.stage.children.select{|s| s.name=="Trades"}.first
        [strategy.snapshot.created_at.to_i*1000, trade_stage.potential.amount.to_f]
      end
    end
    @strategy_ids = strategies.map{|strategy| strategy.id if strategy}

  .submenu
    ul
      li Arbitrage:
      li
        a href="/arbitrage/btc:usd" BTC/USD
      li
        a href="/arbitrage/eth:btc" ETH/BTC
      li
        a href="/arbitrage/doge:btc" DOGE/BTC

  div.bighalf
    h2 #{@ac.upcase}/#{@pc.upcase} Arbitrage Strategy Report

    section#strategy
      - if @strategy
        h4
          | Strategy
          '  #{link_to "##{@strategy.id}", @strategy}
          time datetime="#{@strategy.created_at.iso8601}" data-format="yyyy-MMM-dd hh:mmtt"
          '
          span.local_timezone

        section#opportunity style="margin-bottom: 1em"
          div style="width: 45em"
            - trade_stage = @strategy.stage.children.select{|s| s.name=="Trades"}.first
            ' For the monitored exchanges, the total value of offers
            ' that have immediate buyers is
            span style="font-size: 110%; font-weight:bold; color:#{trade_stage.potential < 0 ? "#e00" : "black"}"
              ' #{number_to_currency(trade_stage.balance_in.amount, {unit:''})}#{trade_stage.balance_in.currency}.
            - if trade_stage.balance_in > 0.01
              ' Selling immediately,
              ' including market fees, earns
              span style="font-size: 110%; font-weight:bold; color:#{trade_stage.potential < 0 ? "#e00" : "black"}"
                ' #{number_to_currency(trade_stage.balance_out.amount, {unit:''})}#{trade_stage.balance_out.currency}

              ' for a profit of
              span style="font-size: 110%; font-weight:bold; color:#{trade_stage.potential < 0 ? "#e00" : "black"}"
                ' #{number_to_currency(trade_stage.potential.amount, {unit:''})}#{trade_stage.potential.currency} (#{"%0.3f"%trade_stage.profit_percentage}%).
              - trade_stage_moves = @strategy.stage.children.select{|s| s.name=="Moves"}.first
              /!
                ' Estimated transfer fees of
                span style="font-size: 110%; font-weight:bold"
                  ' #{trade_stage_moves.balance_in - trade_stage.balance_in}
                ' adjust total profit to
                span style="font-size: 110%; font-weight:bold; color:#{@strategy.potential < 0 ? "#e00" : "black"}"
                  ' #{@strategy.potential} (#{"%0.3f"%@strategy.profit_percentage}%)
            - else
              ' The exchange pricess are close enough that no opportunity is currently available.
        section#trade_summary
          div style="float:left"
            i
              | ---- transfer #{@strategy.payment_currency.upcase} ---->&nbsp;
          table style="float:left"
            - @strategy.exchange_balances.select{|eb| eb.balances.select{|b|b.currency == @strategy.payment_currency && b>0}.any?}.each do |eb|
              tr
                td
                  a href="#{exchange_path(eb.exchange)}" style="color: black" #{eb.exchange.name}
                - eb.balances.each do |b|
                  td
                    - if b > 0
                      | buy #{b}
          div style="float:left"
            i
              | &nbsp;---- transfer #{@strategy.asset_currency.upcase} ---->&nbsp;
          table style="float:left"
            - @strategy.exchange_balances.select{|eb| eb.balances.select{|b|b.currency == @strategy.asset_currency && b>0}.any?}.each do |eb|
              tr
                td
                  a href="#{exchange_path(eb.exchange)}" style="color: black" #{eb.exchange.name}
                - eb.balances.each do |b|
                  td
                    - if b > 0
                      | sell #{b}

          br style="clear: both"
      - else
        | No strategy available
    javascript:
      $(function() {
        setup(#{{JSON.pretty_generate(@chart_data)}},
              [],
              #{{@strategy_data.to_json}},
              #{{@strategy_ids.to_json}})

      })
    div.clearboth

    section#history
      - if @start > @epoch
        a href="?hours=24&start=#{(@start-1.day).strftime("%Y-%m-%d")}"
          <- Prev day
      h4 Strategy History (#{@hours} hours)

      div#chart

      div#legend

div.bighalf#adsense
  - if logged_in?
    - balance = current_user.balance('btc')
    - if balance && balance.amount*1000 > 1
    - else
      a href="/#{current_user.username}/?page=balances" 1 mBTC removes ads
      = render partial: "layouts/adsense"
  - else
    a href="/session/signup" 1 mBTC removes ads
    = render partial: "layouts/adsense"

div.clearboth


